scilla_version 0

(* ZBadge Contract *)
(* This example contract demonstrates how to issue controlled and scarce unique badges *)

(* @note: ZBadge allows a single authority to manage access and membership to scarce, unique badges. *)
(* Each badge has a primary authority, who can add members in by issuing them badges. *)
(* to add, remove and update badges from community participants. Access controls logic is *)
(* delibrately left out for brevity. *)


(* In production deployments, you will want to implement proper access *)
(* control logic in your smart contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils 
library ZBadge

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeBadgeExists
  | CodeUnexpectedError

let makeError =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeBadgeExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      end
    in
    { _eventname : "Error"; code : result_code }


(* Checks and see if an address is a contract owner *)
let checkContractOwner =
    fun (msgSender: ByStr20) =>
    fun (contractOwner: ByStr20) =>
        builtin eq msgSender contractOwner

(* Checks and see if an address is the authority *)
let checkAuthority =
    fun (msgSender: ByStr20) =>
    fun (contractAuthority: ByStr20) =>
        builtin eq msgSender contractAuthority


(* Checks and see if an address has any badges *)
let isBadgeOwner = 
    fun (msgSender: ByStr20) =>
    fun (BadgeId: Uint256) =>
    fun (badHolderMap_tmp : Map (Uint256) (ByStr20)) =>
        let badgeOwner = builtin get badgeHolderMap_tmp BadgeId in
        match badgeOwner with
        | None => False
        | Some val =>
            builtin eq val msgSender
        end 


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract ZBadge
(owner: ByStr20,
authority: ByStr20)


(* Mapping between badgeID to badge owner *)
field badgeHolderMap: Map Uint32 ByStr20 = Emp Uint32 ByStr20

(* badgeInventory will store a Map of Badges                       *)
(* badge data consists of three attributes: BookID, Title and Author*)

(* Equivalent member data in C++ struct *)
(* struct Book {                                                   *)
(*     Uint32 BadgeID;                                             *)
(*     String BadgeTitle;                                          *)
(*     String IpfsStore;                                           *)
(* }                                                               *)

field badgeInventory: Map Uint32 (Pair (String) (String))
                    = Emp Uint32 (Pair (String) (String))


(* Procedures *)

(* Emit Errors *)
procedure MakeError(err : Error)
  e = makeError err;
  event e
end


(* ======== transitions ===============*)

(* Allows the _sender to update the authority key as long as the _sender *)
(* is either the current authority or the owner *)
transition updateAuthority(candidate:ByStr20)
    is_owner = checkContractOwner _sender owner;
    is_authority = checkAuthority _sender authority;
    is_authorized = orb is_owner is_authority;
    match is_authorized with
    | True =>
        authority <- candidate
        (* Emit success event *)
            e = {_eventname: "authorityUpdate"; by: _sender; recipient: to; token: tokenId};
            event e
    | False =>
        err = CodeNotAuthorized;
      MakeError err
    end
    
end


(* @notice: add member is an example. It is not used in other functions. *)
(* @dev: in real contracts, a developer can use a members mapping to manage *)
(* access controls to grant a user permission to perform certain actions *)
(* (e.g. add/remove books) *)

transition issueBadge(name: String, addr: ByStr20, badgeType: Uint32)

    (* Access control: Checking if sender is the owner of the Contract *)
    is_owner = checkContractOwner _sender owner;
    is_authority = checkAuthority _sender authority;
    is_authorized = orb is_owner is_authority;
    match is_authorized with
    | True =>
        (* Only an authorized sender can add a badge *)
        (* Check if membership type is valid. *)
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            (* First build the pair ADT *)
            p = Pair {(String) (Uint32)} name memberType;
            members[addr] := p;

            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            (* Code for the membership type is invalid *)
            msg = {_tag: "";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to add a badge class to the store *)
(* @dev   : Access is limited to the owner and authority         *)
(* @param: bookName : title of the book                          *)
(* @param: author:     author of the book                        *)

transition addBadge(book_title: String, author: String, bookID: Uint32)

    (* @dev: Preconditions can be set to allow only members to add a book *)
    (* @dev: Access controls logic omitted for brevity *)

    books <- bookInventory;
    (* new_book_id = let one = Uint32 1 in builtin add last_book_id one;*)

    bookExist = builtin contains books bookID;
    match bookExist with
    | True =>
        msg = {_tag: "";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_bookid_exist};
        msgs = one_msg msg;
        send msgs
    | False =>
        (* Creating a new Book Model *)
        (* A new book model is a Pair of book_title and author *)
        new_book = Pair {(String) (String)} book_title author;

        (* Add the new book to the book_inventory Map, with BookID as the key*)
        bookInventory[bookID] := new_book;

        tmp = Some {Uint32} bookID;
        lastBookID := tmp;

        msg = {_tag: ""; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};

        msgs = one_msg msg;
        send msgs 
    end
end

(* @notice: Allows a `_sender` to remove a book from the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a book. *)

transition removeBook(book_id: Uint32)
    (* @dev: Preconditions can be set to allow only members to remove a book *)
    (* @dev: Access controls logic omitted for brevity *)

    delete badgeInventory[book_id]

end

(* @notice: Allows a `_sender` to update a book from the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a book. *)

transition updateBook(book_id: Uint32, book_title: String, author: String)
    (* @dev: Preconditions can be set to allow only members to update a book *)
    (* @dev: Access controls omitted for brevity *)
   
    (* preconditions  *)
    books <- bookInventory;
    exist = builtin contains books book_id;
    match exist with
    | False =>
        (* Book ID is not found in the records. *)
        msg = {_tag: ""; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_book_not_found};
        msgs = one_msg msg;
        send msgs
    | True =>
        (* constructs book model  *)
        (* Creating a new Book Model *)
        (* A new book model is a Pair of book_title and author *)
        new_book = Pair {(String) (String)} book_title author;
        (* Add the new book to the book_inventory Map, with BookID as the key*)
        bookInventory[book_id] := new_book;

        msg = {_tag: ""; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};
        msgs = one_msg msg;
        send msgs
    end


end

